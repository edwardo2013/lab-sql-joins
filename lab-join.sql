use sakila;

-- 1. List the number of films per category.
select * from film;
select * from film_category;
select * from category;

select fc.category_id, count(*) as `number_of_films`
  from film as f
  join film_category as fc
  on f.film_id=fc.film_id group by fc.category_id; -- join on film id, group by caegory and use agg count(*)

-- Solution:
select c.name, fc.category_id, count(*) as `number_of_films`
  from film as f
  join film_category as fc
  on f.film_id=fc.film_id 
  join category as c
  on fc.category_id=c.category_id
  group by fc.category_id order by category_id asc;
  
-- 2, Retrieve the store ID, city, and country for each store.
select * from store;
select * from address; -- join by address_id, it has address and city_id
select * from country;
select * from city;

select 
  s.store_id,
  c.city,
  co.country
from store as s
join address as a
on s.address_id=a.address_id
join city as c
on a.city_id=c.city_id
join country co
on c.country_id=co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.
select * from payment; -- sum(amount)
select * from store; -- group by store_id
select * from staff;
select * from customer;
select * from rental;
-- my solution
select s.store_id, sum(p.amount) as `total_revenue`
  from store as s
  join payment as p
  on s.manager_staff_id=p.staff_id 
  group by s.store_id;

-- raiana


-- 4. Determine the average running time of films for each category.
select * from film;
select * from film_category;
select * from category;
-- Solution:
select 
    c.name,
    fc.category_id,
    round(avg(f.length)) as `avg length in min`
  from film as f
  join film_category as fc
  on f.film_id=fc.film_id
  join category as c
  on fc.category_id=c.category_id
  group by  fc.category_id order by round(avg(f.length)) desc;

-- 5. Identify the film categories with the longest average running time.
select 
    c.name,
    fc.category_id,
    round(avg(f.length),2) as `avg length in min`
  from film as f
  join film_category as fc
  on f.film_id=fc.film_id
  join category as c
  on fc.category_id=c.category_id
  group by  fc.category_id order by round((avg(f.length)),2) desc LIMIT 1;
  
  -- BONUS from here:
  -- raiana - using subquery
select
  c.name
  from film as f
  join film_category as fc
  on f.film_id=fc.film_id
  join category as c
  on fc.category_id=c.category_id
  group by  fc.category_id
  having round(avg(f.length),2) = 
    (select 
	  max(`average`) 
	  from
		  (select 
			c.name,
			fc.category_id,
			round(avg(f.length),2) as `average`
		  from film as f
		  join film_category as fc
		  on f.film_id=fc.film_id
		  join category as c
		  on fc.category_id=c.category_id
		  group by  fc.category_id) as grouped_length); -- need to do anotther subquery! to get name
  
  -- 6. Display the top 10 most frequently rented movies in descending order.
  select * from rental;
  select * from inventory;
  select * from film;
  
  select
   film.title,
   count(rental.rental_id)
  from rental
  join inventory on rental.inventory_id=inventory.inventory_id
  join film on inventory.film_id=film.film_id
  group by film.film_id,film.title
  order by count(rental.rental_id) desc
  limit 10;
  
  -- 7. Deterimne id "Academy Dinosaur" can be rented from Store 1
  select * 
    from inventory
    join film on inventory.film_id=film.film_id
    where store_id=1 and title='ACADEMY DINOSAUR';
    
-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a 
-- CASE statement combined with IFNULL."
select 
title,
inventory_id
from inventory
right join film on inventory.film_id=inventory.film_id; -- need to use right join to get the 42 titles that are not in the inventory

SELECT 
    title,
    IF(inventory_id IS NULL,
        'Not Available',
        'Available'),
    CASE
        WHEN inventory_id IS NULL THEN 'Not available'
        ELSE 'Available'
    END,
    IFNULL(inventory_id, 'Not available')
FROM
    inventory
        RIGHT JOIN
    film ON inventory.film_id = film.film_id
ORDER BY inventory_id;